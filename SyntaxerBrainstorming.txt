; globals should be defined in an external .x file along with all usable names in the program.

;Creates a (named) code block for a previously defined function in the .x file
DEFINE <type> <name>
{
<exec>
}

; <number>
	[<digit>]*

; <exec>
	NEWVAR <number> <type> ; Number should be a unique incremental ID, starting at 0 for every function
	ASSIGN <var> <expr> 
	CALL <name>
	IF <expr> { <exec> } { <exec> }
	WHILE <expr> { <exec> }
	RETURN <expr>

; <name>
	<letter> [<letter> | <digit> ]*
; <type>
	["U8","S8","U16","S16","U32","S32","INT","VOID","BOOL","OBJ"]
; <expr>
	([VAR(<var>) LIT(<number>) GT LT EQ GTE LTE NEQ ADD SUB DIV MUL MOD OR AND XOR NOT]*) ; Written in stack notation / Reverse polish notation
; <var>
	!<name> ; References a global reference
	@<number> ; References a function parameter, number is the number of the function paramter, starting from 0 (uses function name mangling to find the variable position in bytes)
	$<number> ; References a local variable created with newvar, number should match the number given to the newvar call
	
Example:
	int max(int a, int b)
	{
		if (a < b)
			return a
		else
			return b
	}
DEFINE INT max-INT-INT
{
	IF ($0 $1 LT) { RETURN ($0) } { RETURN ($1) }
}





In Binary Files:
DEFINE := 0x7F
<name>:= 
{
	u32 string_length;
	char[] string;
}
<number>:= u32 literal
<type>:=
{
	U8   = 0x00
	S8   = 0x01
	U16  = 0x02
	S16  = 0x03
	U32  = 0x04
	S32  = 0x05
	INT  = 0x06
	BOOL = 0x07
	VOID = 0x08
	OBJ  = 0x09 <name>
}
<var> :=
{
	! = 0xF0
	@ = 0xF1
	$ = 0xF2
}
{<exec>} :=
{
	0x52
	enum[]
	{
		NEWVAR = 0x30
		ASSIGN = 0x31
		CALL   = 0x32
		IF     = 0x33
		WHILE  = 0x34
		RETURN = 0x35
	}
	0x53
}
<expr> :=
{
	0x50,
	<type>, ; Determines the (bit) size of the operations
	enum []
	{
		VAR = 0x80
		LIT = 0x81
		GT  = 0x82
		LT  = 0x83
		EQ  = 0x84
		GTE = 0x85
		LTE = 0x86
		NEQ = 0x87
		ADD = 0x88
		SUB = 0x89
		DIV = 0x8A
		MUL = 0x8B
		MOD = 0x8C
		OR  = 0x8D
		AND = 0x8E
		XOR = 0x8F
		NOT = 0x90
	},
	0x51
}

