/// This is a multiline
/// Doc comment

int tinsel_doc(String infile, String outfile, String format)
{
	std_out.putstring("Tinsel Documentation Generator\n In-file:  \"");
	std_out.putstring(infile);
	std_out.putstring("\"\n Out-file: \"");
	std_out.putstring(outfile);
	std_out.putstring("\"\n");

	TokenStream tok_in;
	if (!tok_in.open(infile))
	{
		std_out.putstring("Could not open infile!\n");
		return -1;
	}

	HTMLOutputGenerator output;
	File doc_out;
	if (!doc_out.open(outfile,"w","ASCII"))
	{
		std_out.putstring("Could not open outfile!\n");
		return -1;
	}
	output.header(doc_out,infile);


	Token tok;
	tok.type = TOKEN_UNKNOWN;
	String comment(2048);
	String source(512);
	String retcomment(256);
	bool parse_comment = false;
	bool parse_table = false;
	bool private_status = false;
	while (tok.type != TOKEN_ENDOFSTREAM && tok.type != TOKEN_ERROR)
	{

		if (tok.type == TOKEN_DOC_COMMENT)
		{
			if (tok.value == 64)
			{
				int npos = 0;
				if (tok.str.getchar(npos)==' ') npos = 1;
				String cmd(16);
				int len = 0;
				while (len < 16 && tok.str.getchar(npos)!=' ' && npos < tok.str.pos)
				{
					cmd.append(tok.str.getchar(npos));
					npos += 1;
					len += 1;
				}
				if (cmd.compare("return"))
				{
					parse_comment = true;
					while(npos < tok.str.pos)
					{
						retcomment.append(tok.str.getchar(npos));
						npos += 1;
					}
				}
				else if (cmd.compare("table"))
				{
					if (parse_table)
						output.table_finish(doc_out);
					parse_table = true;
					String table_heading(256);
					while (npos < tok.str.pos)
					{
						table_heading.append(tok.str.getchar(npos));
						npos+=1;
					}
					output.table_begin(doc_out,table_heading);
				}
				else if (cmd.compare("row") && parse_table)
				{
					String cell_data(256);
					output.table_row(doc_out);
					while (npos < tok.str.pos)
					{
						if (tok.str.getchar(npos) != '|')
							cell_data.append(tok.str.getchar(npos));
						else
						{
							output.table_cell(doc_out,cell_data);
							cell_data.clear();
						}
						npos+=1;
					}
					output.table_cell(doc_out,cell_data);
				}
				
			}
			else if (tok.value == 47)
			{
				comment.concat(tok.str);
				comment.append('\n');
				parse_comment = true;
			}

		}
    else if (tok.type == TOKEN_PRIVATE || tok.type == TOKEN_PROTECTED) private_status = true;
    else if (tok.type == TOKEN_PUBLIC) private_status = false;
		else if ((tok.type == TOKEN_SEMICOLON || tok.type == TOKEN_OBLOCK) && parse_comment)
		{
			if (parse_table)
			{
				output.table_finish(doc_out);
			}
			output.definition(doc_out,source,comment,retcomment,private_status);
			comment.clear();
			source.clear();
			retcomment.clear();
			parse_comment = false;
			parse_table = false;
		}
		else if (parse_comment)
		{
			if (tok.type == TOKEN_U8) source.concat("u8 ");
			else if (tok.type == TOKEN_S8) source.concat("s8 ");
			else if (tok.type == TOKEN_U16)	source.concat("u16 ");
			else if (tok.type == TOKEN_S16) source.concat("s16 ");
			else if (tok.type == TOKEN_U32) source.concat("u32 ");
			else if (tok.type == TOKEN_S32) source.concat("s32 ");
			else if (tok.type == TOKEN_INT) source.concat("int ");
			else if (tok.type == TOKEN_BOOL) source.concat("bool ");
			else if (tok.type == TOKEN_VOID) source.concat("void ");
			else if (tok.type == TOKEN_NAME){  source.concat(tok.str); source.append(' '); }
			else if (tok.type == TOKEN_COMMA) source.concat(", ");
			else if (tok.type == TOKEN_OBRACKET) source.concat("(");
			else if (tok.type == TOKEN_CBRACKET) source.concat(")");
			else if (tok.type == TOKEN_CLASS) source.concat("class ");
			else if (tok.type == TOKEN_ENUM) source.concat("enum ");
			else if (tok.type == TOKEN_VIRTUAL) source.concat("virtual ");
			else if (tok.type == TOKEN_ASSIGN) source.concat("= ");
			else if (tok.type == TOKEN_BOOL_TRUE) source.concat("true ");
			else if (tok.type == TOKEN_BOOL_FALSE) source.concat("false ");
			else if (tok.type == TOKEN_INT_LIT)
			{
				source.concat(int_to_string(tok.value));
			}
			else
			{
				std_out.putstring("Unknown token to add to source line\n");
				tok.print(std_out);
			}
		}

		tok = tok_in.getToken();

	}

	output.footer(doc_out);
	tok_in.close();
	return 0;	
}
