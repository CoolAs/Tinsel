import FileIO
class TokenStream
{
private:
	File Stream;
	bool _open = false;

	s32 lookahead;

	u32 linenum;
	
	bool found_whitespace;
	
	//Keeps a lookahead character, and removes all whitespace from the stream
	s32 safe_getchar()
	{
		s32 retchar = lookahead;
		lookahead = Stream.getchar();
		found_whitespace = false;
		while (lookahead == ' ' || lookahead == '\t' || lookahead == '\n')
		{
			found_whitespace = true;
			if (lookahead == '\n') ++linenum;
			lookahead = Stream.getchar();
		}
		return retchar;
	}

	bool attempt_match_strong_token(TokenType& type)
	{
		if (lookahead=='(')
			type = TOKEN_OBRACKET;
		else if (lookahead==')')
			type = TOKEN_CBRACKET;
		else if (lookahead==',')
			type = TOKEN_COMMA;
		else if (lookahead=='.')
			type = TOKEN_ELEMENT;
		else if (lookahead=='[')
			type = TOKEN_OSBRACKET;
		else if (lookahead==']')
			type = TOKEN_CSBRACKET;
		else if (lookahead=='{')
			type = TOKEN_OBLOCK;
		else if (lookahead=='}')
			type = TOKEN_CBLOCK;
		else if (lookahead==';')
			type = TOKEN_SEMICOLON;
		else if (lookahead=='=')
		{
			type = TOKEN_ASSIGN;
			safe_getchar();
			if (lookahead=='=' && found_whitespace==false)
			{
				type = TOKEN_EQUAL;
				safe_getchar();
			}
			return true;
		}
		else if (lookahead=='+')
			type = TOKEN_ADDITION;
		else if (lookahead=='-')
			type = TOKEN_SUBTRACTION;
		else if (lookahead=='*')
			type = TOKEN_MULTIPLICATION;
		else if (lookahead=='/')
			type = TOKEN_DIVISION;
		else if (lookahead=='%')
			type = TOKEN_MODULO;
		else if (lookahead=='~')
			type = TOKEN_BITNOT;
		else if (lookahead=='|')
			type = TOKEN_BITOR;
		else if (lookahead=='&')
			type = TOKEN_BITAND;
		else if (lookahead=='!')
			type = TOKEN_BOOLNOT;
		else if (lookahead=='>')
			type = TOKEN_GREATER;
		else if (lookahead=='<')
			type = TOKEN_LESS;
		
		else if (lookahead < 0)
			type = TOKEN_ENDOFSTREAM;
		else
			return false;
		safe_getchar();
		return true;
	}
		
public:
	bool open(String filename){
		if (!Stream.open(filename,String("r"),String("ASCII")))
			return false;
		_open = true;
		linenum = 0;
		lookahead = Stream.getchar();
		return true;
	}



	Token getToken(){
		Token tok;
		tok.type = TOKEN_UNKNOWN;
		if (_open == false)
			tok.type = TOKEN_ENDOFSTREAM;
		else
		{
			if(!attempt_match_strong_token(tok.type)) safe_getchar();
		}

		return tok;
	}

	bool close(){
		_open = false;
		return Stream.close();
	}

};
