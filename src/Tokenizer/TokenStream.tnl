import FileIO

/// A class that reads a .tnl file and creates a stream of token objects from it.
class TokenStream
{
private:
	/// The file stream of the .tnl input file
	File Stream;

	/// True if the input file has been opened
	bool _open = false;
	/// True if an error has occured
	bool _error = false;
	/// Holds the original filename of the input file
	String _filename;

	/// A lookahead, for the next character
	s32 lookahead;	

	/// The current line number
	u32 linenum;

	/// True if the stream reader has found whitespace between the last word character
	bool found_whitespace;
	
	/// Reads a character from the stream and holds it in lookahead
	///  Ignores whitespace, but updates linenumber and found_whitespace flags
	void safe_getchar()
	{
		s32 retchar = lookahead;
		lookahead = Stream.getchar();
		found_whitespace = false;
		while (lookahead == ' ' || lookahead == '\t' || lookahead == '\n')
		{
			found_whitespace = true;
			if (lookahead == '\n') linenum+=1;
			lookahead = Stream.getchar();
		}
	}

	/// A simple function that reads string escape codes
	///  The following are supported: \\ \' \" \t \n
	void unescape_lookahead()
	{
		if (lookahead == '\\')
		{
			safe_getchar();
			if (lookahead == '\\')
				lookahead = '\\';
			else if (lookahead == '\'')
				lookahead = '\'';
			else if (lookahead == '\"')
				lookahead = '\"';
			else if (lookahead == 't')
				lookahead = '\t';
			else if (lookahead == 'n')
				lookahead = '\n';
		}
	}

	/// Prints a pretty warning message
	void print_warning(String warning_string, u32 warnlinenum)
	{
		std_out.putstring(_filename);
		std_out.putchar(':');
		std_out.putint(warnlinenum);
		std_out.putstring(" - Warning: ");
		std_out.putstring(warning_string);
		std_out.putchar('\n');
	}

	/// Prints a pretty error message
	void print_error(String error_string, u32 errorlinenum)
	{
		std_out.putstring(_filename);
		std_out.putchar(':');
		std_out.putint(errorlinenum);
		std_out.putstring(" - Error: ");
		std_out.putstring(error_string);
		std_out.putchar('\n');
	}

	/// Attemps to match strong tokens (tokens that seperate other tokens without the need for whitespace)
	///  Also matches comment tokens, but doesn't handle them, returns false in this case
	//@ return true if a token was matched, false if not.
	bool attempt_match_strong_token(TokenType type)
	{
		if (lookahead=='(')
			type = TOKEN_OBRACKET;
		else if (lookahead==')')
			type = TOKEN_CBRACKET;
		else if (lookahead==',')
			type = TOKEN_COMMA;
		else if (lookahead=='.')
			type = TOKEN_ELEMENT;
		else if (lookahead=='[')
			type = TOKEN_OSBRACKET;
		else if (lookahead==']')
			type = TOKEN_CSBRACKET;
		else if (lookahead=='{')
			type = TOKEN_OBLOCK;
		else if (lookahead=='}')
			type = TOKEN_CBLOCK;
		else if (lookahead==';')
			type = TOKEN_SEMICOLON;
		else if (lookahead=='+')
			type = TOKEN_ADDITION;
		else if (lookahead=='*')
			type = TOKEN_MULTIPLICATION;
		else if (lookahead=='%')
			type = TOKEN_MODULO;
		else if (lookahead=='~')
			type = TOKEN_BITNOT;
		else if (lookahead=='=')
		{
			type = TOKEN_ASSIGN;
			safe_getchar();
			if (lookahead=='=' && found_whitespace==false)
			{
				type = TOKEN_EQUAL;
				safe_getchar();
			}
			return true;
		}
		else if (lookahead=='-')
		{
			type = TOKEN_SUBTRACTION;
			safe_getchar();
			if (lookahead=='>' && found_whitespace==false)
			{
				print_warning("Use of -> for TOKEN_ELEMENT is not recommended! (use . instead)", linenum);
				type = TOKEN_ELEMENT;
				safe_getchar();
			}
			return true;
		}
		else if (lookahead=='/')
		{
			type = TOKEN_DIVISION;
			safe_getchar();
			if (lookahead=='/' && found_whitespace == false)
			{
				type = TOKEN_COMMENT;
				lookahead = Stream.getchar();
				return false;
			}
			return true;
		}
		else if (lookahead=='|')
		{
			type = TOKEN_BITOR;
			safe_getchar();
			if (lookahead=='|' && found_whitespace == false)
			{
				type = TOKEN_BOOLOR;
				safe_getchar();
			}
			return true;
		}
		else if (lookahead=='&')
		{
			type = TOKEN_BITAND;
			safe_getchar();
			if (lookahead=='&' && found_whitespace == false)
			{
				type = TOKEN_BOOLAND;
				safe_getchar();
			}
			return true;
		}
		else if (lookahead=='!')
		{
			type = TOKEN_BOOLNOT;
			safe_getchar();
			if (lookahead=='=' && found_whitespace == false)
			{
				type = TOKEN_NOTEQUAL;
				safe_getchar();
			}
			return true;
		}
		else if (lookahead=='>')
		{
			type = TOKEN_GREATER;
			safe_getchar();
			if (lookahead=='=' && found_whitespace == false)
			{
				type = TOKEN_GREATEREQUAL;
				safe_getchar();
			}
			return true;
		}
		else if (lookahead=='<')
		{
			type = TOKEN_LESS;
			safe_getchar();
			if (lookahead=='=' && found_whitespace == false)
			{
				type = TOKEN_LESSEQUAL;
				safe_getchar();
			}
			return true;
		}
		else if (lookahead==':')
		{
			type = TOKEN_COLON;
			safe_getchar();
			if (lookahead==':' && found_whitespace == false)
			{
				type = TOKEN_STATICELEMENT;
				safe_getchar();
			}
			return true;
		}
		else if (lookahead < 0)
			type = TOKEN_ENDOFSTREAM;
		else
			return false;
		safe_getchar();
		return true;
	}

	/// Attemps to match a textual/reserved token.
	//@ return true if a string token was matched
	bool attempt_match_string_token(TokenType type, String str_token)
	{
		if (str_token.compare("u8"))
			type = TOKEN_U8;
		else if (str_token.compare("s8"))
			type = TOKEN_S8;
		else if (str_token.compare("u16"))
			type = TOKEN_U16;
		else if (str_token.compare("s16"))
			type = TOKEN_S16;
		else if (str_token.compare("u32"))
			type = TOKEN_U32;
		else if (str_token.compare("s32"))
			type = TOKEN_S32;
		else if (str_token.compare("int"))
			type = TOKEN_INT;
		else if (str_token.compare("bool"))
			type = TOKEN_BOOL;
		else if (str_token.compare("self"))
			type = TOKEN_SELF;
		else if (str_token.compare("this"))
		{
			print_warning("Use of this for TOKEN_SELF is not recommended! (use self. instead of this->)", linenum);
			type = TOKEN_SELF;
		}
		else if (str_token.compare("class"))
			type = TOKEN_CLASS;
		else if (str_token.compare("const"))
			type = TOKEN_CONST;
		else if (str_token.compare("enum"))
			type = TOKEN_ENUM;
		else if (str_token.compare("return"))
			type = TOKEN_RETURN;
		else if (str_token.compare("if"))
			type = TOKEN_IF;
		else if (str_token.compare("else"))
			type = TOKEN_ELSE;
		else if (str_token.compare("while"))
			type = TOKEN_WHILE;
		else if (str_token.compare("for"))
			type = TOKEN_FOR;
		else if (str_token.compare("public"))
			type = TOKEN_PUBLIC;
		else if (str_token.compare("private"))
			type = TOKEN_PRIVATE;
		else if (str_token.compare("protected"))
			type = TOKEN_PROTECTED;
		else if (str_token.compare("true"))
			type = TOKEN_BOOL_TRUE;
		else if (str_token.compare("false"))
			type = TOKEN_BOOL_FALSE;
		else if (str_token.compare("import"))
			type = TOKEN_IMPORT;
		else if (str_token.compare("void"))
			type = TOKEN_VOID;
		else if (str_token.compare("break"))
			type = TOKEN_BREAK;
		else return false;

		return true;
	}

	/// Pases a integer literal in a specified base
	/// If the base is zero, this function returns 0 immediately
	///  Implemented bases: 0,2,10,16
	//@ return the pased integer
	s32 parse_integer_literal(int base)
	{
		
		if (base == 0) return 0;
		if (base != 2 && base != 10 && base != 16)
		{
			print_error("Invalid base for parsing integer literal (internal error, dafaq?)",linenum);
			std_out.putint(base);
			_error = true;
			return -1;
		}

		found_whitespace = false;
		s32 integer = 0;
	
		//while (the lookahead is a valid character for the requested base)
		while ( (
				( (base == 10 || base == 16) && lookahead>= '0' && lookahead <= '9') ||
				( (base == 16 ) && lookahead >= 'A' && lookahead <= 'F') ||
				( base == 2 && ( lookahead == '0' || lookahead == '1') )
			) && found_whitespace == false )
		{
			if (lookahead >= '0' && lookahead <= '9')
				integer = integer * base + (lookahead - '0');
			else if (lookahead >= 'A' && lookahead <= 'F')
				integer = integer * base + (lookahead - 'A' + 10);
			safe_getchar();
		}

		return integer;		
	}
public:

	/// Opens a filename and prepares it for parsing.
	bool open(String filename){
		if (!Stream.open(filename,String("r"),String("ASCII")))
			return false;
		_open = true;
		_error = false;
		_filename = filename;
		linenum = 1;
		lookahead = Stream.getchar();
		return true;
	}


	/// Parses and returns the next token in the stream
	///  Only allocates 256 bytes for comments and names, and 512 bytes for string literals
	Token getToken(){
		Token tok;
		tok.type = TOKEN_UNKNOWN;
		tok.value = 0;
		tok.linenum = linenum;
		// Return Token{ type = TOKEN_ERROR } if there has been an error
		if (_error)
			tok.type = TOKEN_ERROR;
		// Return Token{ type = TOKEN_ENDOFSTREAM } if the file is not open
		else if (_open == false)
			tok.type = TOKEN_ENDOFSTREAM;
		else
		{
			// First attempt to match strong tokens
			if(!attempt_match_strong_token(tok.type))
			{
				//Then check if a comment token was matched, but not handled, and if so, handle it.
				if (tok.type == TOKEN_COMMENT)
				{
					tok.value = lookahead;
					String comment_str(256);
					if (lookahead == '@' || lookahead == '/')
					{
						tok.type = TOKEN_DOC_COMMENT;
						lookahead = Stream.getchar();
					}

					while (lookahead!='\n')
					{
						comment_str.append(lookahead);
						lookahead = Stream.getchar();					
					}
					linenum += 1;
					tok.str = comment_str;
					safe_getchar();
				}
				else if (lookahead >= '0' && lookahead <= '9')
				{
					int base = 10;
					if (lookahead == '0')
					{
						safe_getchar();
						if (lookahead == 'b')
							base = 2;
						else if (lookahead == 'x')
							base = 16;
						else if (lookahead < '0' || lookahead > '9' || found_whitespace==true)
						{
							base = 0;
						}
						else
						{
							print_error("Invalid base for integer literal (you've got a leading 0)", tok.linenum);
						}
						safe_getchar();
					}
					tok.type = TOKEN_INT_LIT;
					tok.value = parse_integer_literal(base);
				}
				else if ((lookahead >= 'a' && lookahead <= 'z') || (lookahead >= 'A' && lookahead <= 'Z') || lookahead=='_')
				{
					found_whitespace = false;
					String str_token(256);
					int string_length = 0;

					//while lookahead is in [a-zA-Z0-9], we've encounted no whitespace, and we haven't gone out of bounds of our string
					while (	(
							(lookahead >= 'a' && lookahead <= 'z') || 
							(lookahead >= 'A' && lookahead <= 'Z') || 
							(lookahead >= '0' && lookahead <= '9') || lookahead == '_'
						) && found_whitespace == false && string_length < 256)
					{
						str_token.append(lookahead);
						string_length += 1;
						safe_getchar();
					}
					tok.type = TOKEN_NAME;
					
					if (!attempt_match_string_token(tok.type,str_token))
						tok.str = str_token;

				}
				else if (lookahead == '\'')
				{
					lookahead = Stream.getchar();
					unescape_lookahead();

					tok.type = TOKEN_CHAR_LIT;
					tok.value = lookahead;

					String char_lit(1);
					char_lit.append(tok.value);
					tok.str = char_lit;
					safe_getchar();

					if (lookahead != '\'')
					{
						print_error("CHAR_LIT requires a closing \'",tok.linenum);
						_error = true;
						tok.type = TOKEN_ERROR;
					}
					safe_getchar();
				}
				else if (lookahead=='\"')
				{
					String str_lit(512);
					safe_getchar();					
					tok.type = TOKEN_STRING_LIT;
					while (lookahead!= '\"' && !_error)
					{
						unescape_lookahead();
						str_lit.append(lookahead);
						lookahead = Stream.getchar();
						if (lookahead < 0)
						{
							print_error("End of File encountered while parsing string literal (put the \" in)",tok.linenum);
							tok.type = TOKEN_ERROR;
							_error = true;
						}
						else if (lookahead == '\n')
							linenum+=1;
					}
					tok.str = str_lit;
					safe_getchar();
				}
				else safe_getchar();
			}
		}

		return tok;
	}

	/// Closes the previously opened file
	//@ return true on success
	bool close(){
		_open = false;
		return Stream.close();
	}

};
