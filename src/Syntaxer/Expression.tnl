class Expression
{
public:
	int returnType;
	Token currentTok;
	bool parseLevel0(TokenStream inStream, SyntaxFileWriter outStream,Variable array locals)
	{
		if (currentTok.type == TOKEN_NAME)
		{
			bool foundVariable = false;
			Variable local;
			for (int i = 0; i < locals.length; ++i)
			{
				if (locals[i].name.compare(currentTok.str))
				{
					foundVariable = true;
					local = locals[i];
				}
			}
			if (!foundVariable)
				outStream.expressionGlobalVariable(currentTok.str);
			else
				outStream.expressionLocalVariable(local);
			currentTok = inStream.getToken();
		}
		else if (currentTok.type == TOKEN_INT_LIT)
		{
			outStream.expressionLiteral(currentTok.value);
			currentTok = inStream.getToken();
		}
		else
		{
			std_out.putstring("[EXPRESSION] Unknown statement ");
			std_out.putint(currentTok.type);
			std_out.putchar('\n');
		}
	}
	
	bool parseLevel1(TokenStream inStream, SyntaxFileWriter outStream, Variable array locals)
	{
		Token oldTok = currentTok;
		if (currentTok.type == TOKEN_BITNOT || currentTok.type == TOKEN_BOOLNOT)
		{
			currentTok = inStream.getToken();
		}
		parseLevel0(inStream,outStream,locals);
		if (oldTok.type == TOKEN_BITNOT)
			outStream.expressionOperation(OPERATION_BITNOT);
		else if (oldTok.type == TOKEN_BOOLNOT)
			outStream.expressionOperation(OPERATION_BOOLNOT);
	}
	
	bool parseLevel2(TokenStream inStream, SyntaxFileWriter outStream, Variable array locals)
	{
		parseLevel1(inStream,outStream,locals);
		while (currentTok.type == TOKEN_MULTIPLICATION || currentTok.type == TOKEN_DIVISION || currentTok.type == TOKEN_MODULO)
		{
			Token oldTok = currentTok;
			currentTok = inStream.getToken();
			parseLevel1(inStream,outStream,locals);
			if (oldTok.type == TOKEN_MULTIPLICATION)
				outStream.expressionOperation(OPERATION_MULTIPLICATION);
			else if (oldTok.type == TOKEN_DIVISION)
				outStream.expressionOperation(OPERATION_DIVISION);
			else if (oldTok.type == TOKEN_MODULO)
				outStream.expressionOperation(OPERATION_MODULO);
		}
	}	

	bool parseLevel3(TokenStream inStream, SyntaxFileWriter outStream, Variable array locals)
	{
		parseLevel2(inStream,outStream,locals);
		while (currentTok.type == TOKEN_ADDITION || currentTok.type == TOKEN_SUBTRACTION)
		{
			Token oldTok = currentTok;
			currentTok = inStream.getToken();
			parseLevel2(inStream,outStream,locals);
			if (oldTok.type == TOKEN_SUBTRACTION)
				outStream.expressionOperation(OPERATION_SUBTRACTION);
			else if (oldTok.type == TOKEN_ADDITION)
				outStream.expressionOperation(OPERATION_ADDITION);
		}
	}

	bool parseLevel4(TokenStream inStream, SyntaxFileWriter outStream, Variable array locals)
	{
		parseLevel3(inStream,outStream,locals);
		while (currentTok.type == TOKEN_BITRSH || currentTok.type == TOKEN_BITLSH)
		{
			Token oldTok = currentTok;
			currentTok = inStream.getToken();
			parseLevel3(inStream,outStream,locals);
			if (oldTok.type == TOKEN_BITRSH)
				outStream.expressionOperation(OPERATION_BITRSH);
			else if (oldTok.type == TOKEN_BITLSH)
				outStream.expressionOperation(OPERATION_BITLSH);
		}
	}

	bool parseLevel5(TokenStream inStream, SyntaxFileWriter outStream, Variable array locals)
	{
		parseLevel4(inStream,outStream,locals);
		while (	currentTok.type == TOKEN_GREATER 	|| currentTok.type == TOKEN_LESS 	|| 
			currentTok.type == TOKEN_GREATEREQUAL 	|| currentTok.type == TOKEN_LESSEQUAL 	||
			currentTok.type == TOKEN_EQUAL		|| currentTok.type == TOKEN_NOTEQUAL	)
		{
			Token oldTok = currentTok;
			currentTok = inStream.getToken();
			parseLevel4(inStream,outStream,locals);
			if (oldTok.type == TOKEN_GREATER)
				outStream.expressionOperation(OPERATION_GT);
			else if (oldTok.type == TOKEN_LESS)
				outStream.expressionOperation(OPERATION_LT);
			else if (oldTok.type == TOKEN_GREATEREQUAL)
				outStream.expressionOperation(OPERATION_GTE);
			else if (oldTok.type == TOKEN_LESSEQUAL)
				outStream.expressionOperation(OPERATION_LTE);
			else if (oldTok.type == TOKEN_EQUAL)
				outStream.expressionOperation(OPERATION_EQ);
			else if (oldTok.type == TOKEN_NOTEQUAL)
				outStream.expressionOperation(OPERATION_NEQ);
		}
	}

	bool parseLevel6(TokenStream inStream, SyntaxFileWriter outStream, Variable array locals)
	{
		parseLevel5(inStream,outStream,locals);
		while ( currentTok.type == TOKEN_BITOR || currentTok.type == TOKEN_BITAND || currentTok.type == TOKEN_BITXOR )
		{
			Token oldTok = currentTok;
			currentTok = inStream.getToken();
			parseLevel5(inStream,outStream,locals);
			if (oldTok.type == TOKEN_BITOR)
				outStream.expressionOperation(OPERATION_BITOR);
			else if (oldTok.type == TOKEN_BITAND)
				outStream.expressionOperation(OPERATION_BITAND);
			else if (oldTok.type == TOKEN_BITXOR)
				outStream.expressionOperation(OPERATION_BITXOR);
		}
	}

	bool parseLevel7(TokenStream inStream, SyntaxFileWriter outStream, Variable array locals)
	{
		parseLevel6(inStream,outStream,locals);
		while ( currentTok.type == TOKEN_BOOLOR || currentTok.type == TOKEN_BOOLAND )
		{
			Token oldTok = currentTok;
			currentTok = inStream.getToken();
			parseLevel6(inStream,outStream,locals);
			if (oldTok.type == TOKEN_BOOLOR)
				outStream.expressionOperation(OPERATION_BOOLOR);
			else if (oldTok.type == TOKEN_BOOLAND)
				outStream.expressionOperation(OPERATION_BOOLAND);
		}
	}

	bool parse(TokenStream inStream, SyntaxFileWriter outStream,Variable array locals)
	{
		currentTok = inStream.getToken();
		outStream.startExpression();
		parseLevel7(inStream,outStream,locals);
		outStream.endExpression();
	}
};
