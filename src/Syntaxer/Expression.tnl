class Expression
{
public:
	int returnType;
	Token currentTok;
	bool parseLevel0(TokenStream inStream, SyntaxFileWriter outStream,Variable array locals)
	{
		if (currentTok.type == TOKEN_NAME)
		{
			bool foundVariable = false;
			Variable local;
			for (int i = 0; i < locals.length; ++i)
			{
				if (locals[i].name.compare(currentTok.str))
				{
					foundVariable = true;
					local = locals[i];
				}
			}
			if (!foundVariable)
				outStream.expressionGlobalVariable(currentTok.str);
			else
				outStream.expressionLocalVariable(local);
			currentTok = inStream.getToken();
		}
		else if (currentTok.type == TOKEN_INT_LIT)
		{
			outStream.expressionLiteral(currentTok.value);
			currentTok = inStream.getToken();
		}
		else
		{
			std_out.putstring("[EXPRESSION] Unknown statement ");
			std_out.putint(currentTok.type);
			std_out.putchar('\n');
		}
	}
	
	bool parseLevel1(TokenStream inStream, SyntaxFileWriter outStream, Variable array locals)
	{
		Token oldTok = currentTok;
		if (currentTok.type == TOKEN_BITNOT || currentTok.type == TOKEN_BOOLNOT)
		{
			currentTok = inStream.getToken();
		}
		parseLevel0(inStream,outStream,locals);
		if (oldTok.type == TOKEN_BITNOT)
			outStream.expressionOperation(OPERATION_BITNOT);
		else if (oldTok.type == TOKEN_BOOLNOT)
			outStream.expressionOperation(OPERATION_BOOLNOT);
	}
	
	bool parseLevel2(TokenStream inStream, SyntaxFileWriter outStream, Variable array locals)
	{
		parseLevel1(inStream,outStream,locals);
		while (currentTok.type == TOKEN_MULTIPLICATION || currentTok.type == TOKEN_DIVISION || currentTok.type == TOKEN_MODULO)
		{
			Token oldTok = currentTok;
			currentTok = inStream.getToken();
			parseLevel1(inStream,outStream,locals);
			if (oldTok.type == TOKEN_MULTIPLICATION)
				outStream.expressionOperation(OPERATION_MULTIPLICATION);
			else if (oldTok.type == TOKEN_DIVISION)
				outStream.expressionOperation(OPERATION_DIVISION);
			else if (oldTok.type == TOKEN_MODULO)
				outStream.expressionOperation(OPERATION_MODULO);
		}
	}


	bool parse(TokenStream inStream, SyntaxFileWriter outStream,Variable array locals)
	{
		currentTok = inStream.getToken();
		outStream.startExpression();
		parseLevel2(inStream,outStream,locals);
		outStream.endExpression();
	}
};
