/// Default number of variables / function defined in the global scope
///  - Is fixed at this level in the C++14 bootstrapping environment
int default_num_globals = 256;

/// Default number of characters to be reserved for function name mangling
///  - Is fixed at this level in the C++14 bootstrapping environment
int default_mangle_length = 256;

/// Default number of function parameters
///  - Is fixed at this level in the C++14 botstrapping environment
int default_function_arguments = 16;

/// The character used to mangle function names with
s32 mangle_character = '-';

/// Returns true if a specific token is a primitive type
bool is_primitive_type(TokenType varType)
{
	if (	varType == TOKEN_U8  || varType == TOKEN_S8  || 
		varType == TOKEN_U16 || varType == TOKEN_S16 ||
		varType == TOKEN_U32 || varType == TOKEN_S32 ||
		varType == TOKEN_INT || varType == TOKEN_BOOL || varType == TOKEN_VOID )
	{
		return true;
	}
	return false;
}

class Syntaxer
{
protected:
	bool _open = false;
	bool _error = false;
	TokenStream Stream;
	String _filename;

	//Used kinda as a lookahaed
	Token currentTok;


	int global_nxtid = 0;
	Variable array globals;

	SyntaxFileWriter outStream;

	/// Prints a pretty warning message
	void print_warning(String warning_string, u32 warnlinenum)
	{
		std_out.putstring("[SYNTAX] ");
		std_out.putstring(_filename);
		std_out.putchar(':');
		std_out.putint(warnlinenum);
		std_out.putstring(" - Warning: ");
		std_out.putstring(warning_string);
		std_out.putchar('\n');
	}

	/// Prints a pretty error message
	void print_error(String error_string, u32 errorlinenum)
	{
		std_out.putstring("[SYNTAX] ");
		std_out.putstring(_filename);
		std_out.putchar(':');
		std_out.putint(errorlinenum);
		std_out.putstring(" - Error: ");
		std_out.putstring(error_string);
		std_out.putchar('\n');
		_error = true;
	}

	/// Prints a pretty table of an array of variables
	void print_variable_table(Variable array variables,String heading)
	{
		std_out.putstring("--------");
		std_out.putstring(heading);
		std_out.putstring("--------\n\n");
		std_out.putstring("PROPERTIES\t TYPE \tOBJNAME\tVALUE/ID NAME \t\n");
		std_out.putstring("----------\t------\t-------\t--------------\t\n");
		for (int i = 0; i < variables.length; ++i)
		{
			// Only print variables with a valid name
			if (!variables[i].name.compare(""))
			{
				std_out.putint(variables[i].properties);
				std_out.putstring(String("\t\t"));
				if ((variables[i].properties&PROPERTY_OBJECT)==0)
					std_out.putstring(var_type_string(variables[i].type));
				else
					std_out.putstring("OBJ");
				std_out.putchar('\t');
				std_out.putstring(variables[i].objname);
				std_out.putchar('\t');
				std_out.putint(variables[i].default_value);
				std_out.putchar('\t');
				std_out.putstring(variables[i].name);
				std_out.putchar('\n');
			}
		}
		std_out.putstring("\n-----------------------\n");
	}
	

	Variable parse_local_variable(Variable array locals)
	{
		Token nxtTok = Stream.getToken();
		Variable local_variable;
		if (nxtTok.type == TOKEN_NAME)
		{
			if (nxtTok.str.compare("array"))
			{
				nxtTok = Stream.getToken();
				local_variable.properties |= PROPERTY_ARRAY;
			}			


			String var_name = nxtTok.str;
			local_variable.type = currentTok.type;
			local_variable.objname = currentTok.str;
			local_variable.name = var_name;

			nxtTok = Stream.getToken();
			if (nxtTok.type == TOKEN_ASSIGN)
			{
				outStream.defineVariable(local_variable);
				outStream.assignmentLocal(local_variable);
				Expression expr;
				if (!expr.parse(Stream,outStream,locals))
					print_error("\rExpression error", nxtTok.linenum);
			}
			else if (nxtTok.type == TOKEN_SEMICOLON)
				outStream.defineVariable(local_variable);
			else 
				print_error("Expected semicolon",nxtTok.linenum);
		}
		else
			print_error("Invalid name for variable / function",nxtTok.linenum);
		return local_variable;
	}



	void parse_block(Variable array locals)
	{
		bool parseBlock = true;
		while (parseBlock && !_error)
		{
			currentTok = Stream.getToken();
			if (currentTok.type == TOKEN_CBLOCK)
				parseBlock = false;
			else if (is_primitive_type(currentTok.type))
			{
				Variable var = parse_local_variable(locals);
				int currentLength = locals.length;
				locals.resize(currentLength+1);
				locals[currentLength] = var;
			}
			else if (currentTok.type == TOKEN_RETURN)
			{
				outStream.startReturn();
				Expression expr;
				expr.parse(Stream,outStream,locals);
				outStream.endReturn();
			}
			else if (currentTok.type == TOKEN_NAME)
			{
				Token nxtTok = Stream.getToken();
				if (nxtTok.type == TOKEN_ASSIGN)
				{

					bool foundVariable = false;
					Variable local;
					for (int i = 0; i < locals.length; ++i)
					{
						if (locals[i].name.compare(currentTok.str))
						{
							local = locals[i];
							foundVariable = true;
						}
					}

					if (!foundVariable)
						outStream.assignmentGlobal(currentTok.str);
					else
						outStream.assignmentLocal(local);

					Expression expr;
					if (!expr.parse(Stream,outStream,locals))
						print_error("\tExpression error",currentTok.linenum);
					
				}
				else
					print_error("Expected assignment after variable name",currentTok.linenum);
			}
			else if (currentTok.type == TOKEN_ENDOFSTREAM)
				print_error("End-of-stream encountered while parsing a code block",currentTok.linenum);
		}
		print_variable_table(locals,"LOCALS");
	}

	void parse_global_function()
	{
		globals[global_nxtid].properties |= PROPERTY_FUNCTION;
		String functionMangle(default_mangle_length);
		bool parseFunction = true;

		Variable array functionArguments;
		functionArguments.reset(default_function_arguments);
		int functionArgumentID = 0;

		while (parseFunction && !_error)
		{
			currentTok = Stream.getToken();
			if (currentTok.type == TOKEN_CBRACKET)
				parseFunction = false;
			else if (currentTok.type == TOKEN_ENDOFSTREAM)
				print_error("End-of-stream encountered while parsing function parameters",currentTok.linenum);
			else if (is_primitive_type(currentTok.type))
			{
				functionArguments[functionArgumentID].type = currentTok.type;
				Token nxtTok = Stream.getToken();
				if (nxtTok.type != TOKEN_NAME)
					print_error("Expected argument name after type in argument list",nxtTok.linenum);
				else
				{
					functionArguments[functionArgumentID].name = nxtTok.str;
					nxtTok = Stream.getToken();
					if (nxtTok.type == TOKEN_CBRACKET)
						parseFunction = false;
					else if (nxtTok.type != TOKEN_COMMA)
						print_error("Expected ',' or ')' after argument declaration in argument list", nxtTok.linenum);
				}				
				functionArgumentID+=1;
			}
		}

		if (!_error)
		{

			Variable array localScope;
			localScope.reset(functionArgumentID+1);

			for (int i = 0; i < functionArgumentID; ++i)
			{
				functionMangle.append(mangle_character);
				functionMangle.concat(var_type_string(functionArguments[i].type));
				localScope[i] = functionArguments[i];
				localScope[i].localVariable = true;
				localScope[i].default_value = -i - 1;
			}
			int newNameLength = globals[global_nxtid].name.length() + functionMangle.length();
			String newName(newNameLength);
			newName.concat(globals[global_nxtid].name);
			newName.concat(functionMangle);
			globals[global_nxtid].name = newName;

			currentTok = Stream.getToken();
			if (currentTok.type == TOKEN_OBLOCK)
			{
				outStream.startFunction(globals[global_nxtid]);
				parse_block(localScope);
				outStream.endFunction(globals[global_nxtid]);
			}
			else
				print_error("Expected block after function declaration",currentTok.linenum);
		}
	}

	void parse_global_variable()
	{
		Token nxtTok = Stream.getToken();
		if (nxtTok.type == TOKEN_NAME)
		{
			if (nxtTok.str.compare("array"))
			{
				nxtTok = Stream.getToken();
				globals[global_nxtid].properties |= PROPERTY_ARRAY;
			}			


			String var_name = nxtTok.str;
			globals[global_nxtid].type = currentTok.type;
			globals[global_nxtid].objname = currentTok.str;
			globals[global_nxtid].name = var_name;

			nxtTok = Stream.getToken();
			if (nxtTok.type == TOKEN_ASSIGN)
			{

				nxtTok = Stream.getToken();
				if (nxtTok.type == TOKEN_INT_LIT)
					globals[global_nxtid].default_value = nxtTok.value;
				else if (nxtTok.type == TOKEN_BOOL_TRUE)
					globals[global_nxtid].default_value = 1;
				else if (nxtTok.type == TOKEN_BOOL_FALSE)
					globals[global_nxtid].default_value = 0;
				else
					print_error("Expected integer literal",nxtTok.linenum);

				nxtTok = Stream.getToken();
			}
			else if (nxtTok.type == TOKEN_OBRACKET)
			{
				parse_global_function();
			}
			else if (nxtTok.type != TOKEN_SEMICOLON)
				print_error("Expected semicolon",nxtTok.linenum);
			global_nxtid += 1;
		}
		else
			print_error("Invalid name for variable / function",nxtTok.linenum);
	}

public:
	/// Opens a file and prepares it for the tokenizer and syntaxer
	bool open(String filename)
	{
		if (!Stream.open(filename))
			return false;
		_open = true;
		_error = false;
		_filename = filename;

		global_nxtid = 0;
		globals.reset(default_num_globals);
	
		outStream.open("default.tast");

		return true;
	}

	/// Parses a file, printing information about it.
	//@ return false on failure
	bool parse()
	{

		bool _eof = false;
		while (!_error && !_eof)
		{
			currentTok = Stream.getToken();

			// Start a global primitive type definition
			if (is_primitive_type(currentTok.type))
			{
				parse_global_variable();
			}
			else if (currentTok.type == TOKEN_NAME)
			{
				globals[global_nxtid].properties |= PROPERTY_OBJECT;
				parse_global_variable();
			}
			else if (currentTok.type == TOKEN_ERROR) _error = true;
			else if (currentTok.type == TOKEN_ENDOFSTREAM) _eof = true;
		}
		return !_error;
	}
	
	
	void printGlobals()
	{
		print_variable_table(globals,"GLOBALS");
	}
  
};

