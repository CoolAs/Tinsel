/// An enum containing all of the possible operations that can be done in an expression
enum ExpressionOperations
{
	OPERATION_BITNOT,
	OPERATION_BOOLNOT,
	OPERATION_NEG,
	
	OPERATION_MULTIPLICATION,
	OPERATION_DIVISION,
	OPERATION_MODULO,

	OPERATION_ADDITION,
	OPERATION_SUBTRACTION,

	OPERATION_BITRSH,
	OPERATION_BITLSH,
	
	OPERATION_LT,
	OPERATION_GT,
	OPERATION_LTE,
	OPERATION_GTE,
	OPERATION_EQ,
	OPERATION_NEQ,
	
	OPERATION_BITOR,
	OPERATION_BITAND,
	OPERATION_BITXOR,

	OPERATION_BOOLOR,
	OPERATION_BOOLAND
};

/// The syntaxer class that creates the .tast file outputs 
///   Could be extended to allow for different file formats
class SyntaxFileWriter
{
	bool _open = false;
	// ID for the next global variable
	int nxt_var_id = 0;
	File myFile;

	/// Keeps track of nested expressions
	int expressionCount = 0;

	/// Keeps track of nested calls
	int callCount = 0;

	void printLocalVariable(Variable localVariable)
	{
		if (localVariable.default_value < 0)
		{
			myFile.putchar('@');
			myFile.putint(-localVariable.default_value - 1);
		}
		else
		{
			myFile.putchar('$');
			myFile.putint(localVariable.default_value);
		}
	}

public:

	/// Opens the output file
	//@return true on success
	bool open(String Filename)
	{
		_open = true;
		return	myFile.open(Filename,"w","ASCII");
		
	}

	/// Starts a code block
	void startBlock()
	{
		myFile.putstring("{\n");
	}

	/// Ends a code block
	void endBlock()
	{
		myFile.putstring("}\n\n");
	}

	/// Starts a function, passed a variable with the return type and name of the function.
	void startFunction(Variable functionVariable)
	{
		myFile.putstring("DEFINE ");
		if ((functionVariable.properties&PROPERTY_OBJECT)==0)
			myFile.putstring(var_type_string(functionVariable.type));
		else
		{
			myFile.putstring("OBJ(");
			myFile.putstring(functionVariable.objname);
			myFile.putstring(")");
		}
		myFile.putchar(' ');
		myFile.putstring(functionVariable.name);
		myFile.putchar('\n');
		startBlock();
		nxt_var_id = 0;
	}

	/// Ends the function, and its internal block
	void endFunction(Variable functionVariable)
	{
		endBlock();
	}

	/// Starts a return statement
	///  Syntaxer should follow with an expression
	void startReturn()
	{
		myFile.putstring("RETURN ");
	}

	/// Ends a return statement
	void endReturn()
	{
	}

	/// Starts a while loop
	///  Syntaxer should follow with an expression, then a code block
	void whileLoop()
	{
		myFile.putstring("WHILE ");
	}

	/// Starts an if statement
	///  Syntaxer should follow with an expression, then two code blocks.
	///   First code block is for true condition, second is for false condition	
	void ifStatement()
	{
		myFile.putstring("IF ");
	}


	/// Used to create a variable on the stack.
	void defineVariable(Variable defineVariable)
	{

		myFile.putstring("CREATEVAR ");
		myFile.putint(nxt_var_id);
		myFile.putchar(' ');
		if ((defineVariable.properties&PROPERTY_OBJECT)==0)
			myFile.putstring(var_type_string(defineVariable.type));
		else
		{
			myFile.putstring("OBJ(");
			myFile.putstring(defineVariable.objname);
			myFile.putstring(")");
		}
		myFile.putchar('\n');
		defineVariable.default_value = nxt_var_id;
		defineVariable.localVariable = true;
		nxt_var_id += 1;
	}
	
	/// Used to assign a global variable by its name
	///  Syntaxer should follow with an expression
	void assignmentGlobal(String name)
	{
		myFile.putstring("ASSIGN !");
		myFile.putstring(name);
		myFile.putchar(' ');
	}

	/// Used to assign a local variabel by its variable object
	///  Syntaxer should follow with an expression
	bool assignmentLocal(Variable localVariable)
	{
		if (!localVariable.localVariable) 
			return false;
		myFile.putstring("ASSIGN ");
		printLocalVariable(localVariable);
		myFile.putchar(' ');
		return true;
	}

	/// Starts a call procedure, which is formed with a number of expressions
	void startCall(String function_name)
	{
		myFile.putstring("CALL( ");
		myFile.putstring(function_name);
		myFile.putchar(' ');
		callCount += 1;
	}

	/// Signifies the end of a call argument expression, and the beginning of the next
	void nxtCallArgument()
	{
		myFile.putstring(", ");
	}

	/// Ends a call procedure
	void endCall()
	{
		myFile.putstring(") ");
		callCount -= 1;
	}

	/// Starts an expression, which is formed with appropriate expression calls in reverse polish notation
	void startExpression()
	{
		if (expressionCount == 0 && callCount == 0)
		{
			myFile.putstring("( ");
		}
		expressionCount += 1;
	}

	/// Puts a gobal variable onto the working stack
	void expressionGlobalVariable(String name)
	{
		myFile.putchar('!');
		myFile.putstring(name);
		myFile.putchar(' ');
	}

	/// Puts a local variable onto the working stack
	bool expressionLocalVariable(Variable localVariable)
	{
		if (!localVariable.localVariable)
			return false;

		printLocalVariable(localVariable);
		myFile.putchar(' ');
		return true;
	}

	/// Puts a literal onto the working stack
	void expressionLiteral(s32 value)
	{
		myFile.putstring("LIT(");
		myFile.putint(value);
		myFile.putstring(") ");
	}

	/// Does an operation on the last 1-2 variables pushed onto the stack
	void expressionOperation(int operation)
	{
		if (operation==OPERATION_BITNOT)
			myFile.putstring("BITNOT ");
		else if (operation==OPERATION_BOOLNOT)
			myFile.putstring("BOOLNOT ");
		else if (operation==OPERATION_NEG)
			myFile.putstring("NEG ");
		else if (operation==OPERATION_MULTIPLICATION)
			myFile.putstring("MUL ");
		else if (operation==OPERATION_DIVISION)
			myFile.putstring("DIV ");
		else if (operation==OPERATION_MODULO)
			myFile.putstring("MOD ");
		else if (operation==OPERATION_ADDITION)
			myFile.putstring("ADD ");
		else if (operation==OPERATION_SUBTRACTION)
			myFile.putstring("SUB ");
		else if (operation==OPERATION_BITRSH)
			myFile.putstring("RSH ");
		else if (operation==OPERATION_BITLSH)
			myFile.putstring("LSH ");
		else if (operation == OPERATION_LT)
			myFile.putstring("LT ");
		else if (operation == OPERATION_GT)
			myFile.putstring("GT ");
		else if (operation == OPERATION_LTE)
			myFile.putstring("LTE ");
		else if (operation == OPERATION_GTE)
			myFile.putstring("GTE ");
		else if (operation == OPERATION_EQ)
			myFile.putstring("EQ ");
		else if (operation == OPERATION_NEQ)
			myFile.putstring("NEQ ");
		else if (operation == OPERATION_BITOR)
			myFile.putstring("BITOR ");
		else if (operation == OPERATION_BITAND)
			myFile.putstring("BITAND ");
		else if (operation == OPERATION_BITXOR)
			myFile.putstring("BITXOR ");
		else if (operation == OPERATION_BOOLOR)
			myFile.putstring("BOOLOR ");
		else if (operation == OPERATION_BOOLAND)
			myFile.putstring("BOOLAND ");


	}

	/// Ends an expression
	void endExpression()
	{
		if (expressionCount == 1 && callCount == 0)
		{
			myFile.putstring(")\n");
		}
		expressionCount -= 1;
	}

	/// Closes the syntax file
	void close()
	{
		_open = false;
		myFile.close();
	}

};
