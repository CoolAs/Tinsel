enum ExpressionOperations
{
	OPERATION_BITNOT,
	OPERATION_BOOLNOT,
	
	OPERATION_MULTIPLICATION,
	OPERATION_DIVISION,
	OPERATION_MODULO,

	OPERATION_ADDITION,
	OPERATION_SUBTRACTION,

	OPERATION_BITRSH,
	OPERATION_BITLSH,
	
	OPERATION_LT,
	OPERATION_GT,
	OPERATION_LTE,
	OPERATION_GTE,
	OPERATION_EQ,
	OPERATION_NEQ,
	
	OPERATION_BITOR,
	OPERATION_BITAND,
	OPERATION_BITXOR,

	OPERATION_BOOLOR,
	OPERATION_BOOLAND
};

class SyntaxFileWriter
{
	bool _open = false;
	int nxt_var_id = 0;
	File myFile;
	int expressionCount = 0;

	void printLocalVariable(Variable localVariable)
	{
		if (localVariable.default_value < 0)
		{
			myFile.putchar('@');
			myFile.putint(-localVariable.default_value - 1);
		}
		else
		{
			myFile.putchar('$');
			myFile.putint(localVariable.default_value);
		}
	}

public:

	bool open(String Filename)
	{
		_open = true;
		myFile.open(Filename,"w","ASCII");
	}

	bool startBlock()
	{
		myFile.putstring("{\n");
	}

	bool endBlock()
	{
		myFile.putstring("}\n");
	}

	bool startFunction(Variable functionVariable)
	{
		myFile.putstring("DEFINE ");
		if ((functionVariable.properties&PROPERTY_OBJECT)==0)
			myFile.putstring(var_type_string(functionVariable.type));
		else
		{
			myFile.putstring("OBJ(");
			myFile.putstring(functionVariable.objname);
			myFile.putstring(")");
		}
		myFile.putchar(' ');
		myFile.putstring(functionVariable.name);
		myFile.putchar('\n');
		startBlock();
		nxt_var_id = 0;
	}

	bool endFunction(Variable functionVariable)
	{
		endBlock();
	}

	bool startReturn()
	{
		myFile.putstring("RETURN ");
	}

	bool endReturn()
	{
		myFile.putstring("\n");
	}

	bool whileLoop()
	{
		myFile.putstring("WHILE ");
	}

	bool defineVariable(Variable defineVariable)
	{

		myFile.putstring("CREATEVAR ");
		myFile.putint(nxt_var_id);
		myFile.putchar(' ');
		if ((defineVariable.properties&PROPERTY_OBJECT)==0)
			myFile.putstring(var_type_string(defineVariable.type));
		else
		{
			myFile.putstring("OBJ(");
			myFile.putstring(defineVariable.objname);
			myFile.putstring(")");
		}
		myFile.putchar('\n');
		defineVariable.default_value = nxt_var_id;
		defineVariable.localVariable = true;
		nxt_var_id += 1;
	}
	
	bool assignmentGlobal(String name)
	{
		myFile.putstring("ASSIGN !");
		myFile.putstring(name);
		myFile.putchar(' ');
		return true;
	}

	bool assignmentLocal(Variable localVariable)
	{
		if (!localVariable.localVariable) 
			return false;
		myFile.putstring("ASSIGN ");
		printLocalVariable(localVariable);
		myFile.putchar(' ');
		return true;
	}

	bool startExpression()
	{
		if (expressionCount == 0)
		{
			myFile.putstring("( ");
		}
		expressionCount += 1;
	}

	bool expressionGlobalVariable(String name)
	{
		myFile.putchar('!');
		myFile.putstring(name);
		myFile.putchar(' ');
	}

	bool expressionLocalVariable(Variable localVariable)
	{
		if (!localVariable.localVariable)
			return false;

		printLocalVariable(localVariable);
		myFile.putchar(' ');
		return true;
	}

	bool expressionLiteral(int value)
	{
		myFile.putstring("LIT(");
		myFile.putint(value);
		myFile.putstring(") ");
	}

	bool expressionOperation(int operation)
	{
		if (operation==OPERATION_BITNOT)
			myFile.putstring("BITNOT ");
		else if (operation==OPERATION_BOOLNOT)
			myFile.putstring("BOOLNOT ");
		else if (operation==OPERATION_MULTIPLICATION)
			myFile.putstring("MUL ");
		else if (operation==OPERATION_DIVISION)
			myFile.putstring("DIV ");
		else if (operation==OPERATION_MODULO)
			myFile.putstring("MOD ");
		else if (operation==OPERATION_ADDITION)
			myFile.putstring("ADD ");
		else if (operation==OPERATION_SUBTRACTION)
			myFile.putstring("SUB ");
		else if (operation==OPERATION_BITRSH)
			myFile.putstring("RSH ");
		else if (operation==OPERATION_BITLSH)
			myFile.putstring("LSH ");
		else if (operation == OPERATION_LT)
			myFile.putstring("LT ");
		else if (operation == OPERATION_GT)
			myFile.putstring("GT ");
		else if (operation == OPERATION_LTE)
			myFile.putstring("LTE ");
		else if (operation == OPERATION_GTE)
			myFile.putstring("GTE ");
		else if (operation == OPERATION_EQ)
			myFile.putstring("EQ ");
		else if (operation == OPERATION_NEQ)
			myFile.putstring("NEQ ");
		else if (operation == OPERATION_BITOR)
			myFile.putstring("BITOR ");
		else if (operation == OPERATION_BITAND)
			myFile.putstring("BITAND ");
		else if (operation == OPERATION_BITXOR)
			myFile.putstring("BITXOR ");
		else if (operation == OPERATION_BOOLOR)
			myFile.putstring("BOOLOR ");
		else if (operation == OPERATION_BOOLAND)
			myFile.putstring("BOOLAND ");


	}

	bool endExpression()
	{
		if (expressionCount == 1)
		{
			myFile.putstring(")\n");
		}
		expressionCount -= 1;
	}

	bool close()
	{
		_open = false;
	}

};
